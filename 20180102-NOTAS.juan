
LIBRO 1- MEAN

ECMASCRIPT 2015  --ES6


MODULOS
_________________________
lib.js

---------------

export function halfOf(x) {
return x / 2;
}
export function multiply(x, y) {
return x * y;
}

Uso:

import halfOf from 'lib';
console.log(halfOf(84));


Uso:

import {halfOf, multiply} from 'lib';
console.log(halfOf(84));
console.log(multiply(21, 2));


----------------------------------
Otro ejemplo :

export default function () {
console.log('I did something')
};

Uso:

import doSomething from 'doSomething';
doSomething();


-------------------------------------------

CLASES

-------------------------------------------
class Vehicle {
    constructor(wheels) {
       this.wheels = wheels;
    }

    toString() {
     return '(' + this.wheels + ')';
    }
}


class Car extends Vehicle {
       constructor(color) {
           super(4);
          this.color = color;
        }

    toString() {
       return super.toString() + ' colored: ' + this.color;
    }
}

let car = new Car('blue');
car.toString();
console.log(car instanceof Car);
console.log(car instanceof Vehicle);


---------------------------------------------


ARROW FUNCTIONS

_____________________________________________



uso:

const squares = numbers.map(n => n * n);



otro uso:

numbers.forEach(n => {
          if (n % 2 === 0) evens.push(n);
       });


OTRO USO:


const author = {
        fullName: "Bob Alice",
        books: [],
        printBooks() {
          this.books.forEach(book => console.log(book + ' by ' +
         this.fullName));
         }
};



--------------------------------------------

LET Y CONST


_____________________________________________



DEFAULT, REST Y SPREAD

________________________________________________


características para los parámetros de funciones




1---- default

variable y establece por default a cero

function add(x, y = 0) {
   return x + y;
}
add(1)
add(1,2)



2 ------- rest    pasa un array como argumentos con los tres puntos

function userFriends(user, ...friends) {
console.log(user + ' has ' + friends.length + ' friends');
}
userFriends('User', 'Bob', 'Alice');



3 ----- spread   vuelve un array en argumentos



function userTopFriends(firstFriend, secondFriend, thirdFriends) {
console.log(firstFriend);
console.log(secondFriend);
console.log(thirdFriends);
}
userTopFriends(...['Alice', 'Bob', 'Michelle']);


-----------------------


CLOSURES

funciones que hacen referencia a variables de su entorno principal


----------------------------


MIDDLEWARE

función con tres argumesntos

- req
- res
- next

funciones ejecutadas en un orden
first in first out FIFO



__________________


EXPRESS


__________________



metodos de la app express

- app.set(name,value)  : establecer variables de entorno que express utiliza

- app.get(name)  : obtener variables de entorno que express usa en su configuración

- app.engine(ext,callback) : definit motor de plantillas

     ejemplo: app.engine('html', require('ejs').renderFile)

- app.locals : propiedad usada para enviar variables a todas las plantillas renderizadas

-  app.use([path], callback) : para crear middleware y manegar request enviadas al servidor. Tambien para responder a ciertas rutas

- app.VERB(path, [callback...],callback) : para definir uno o varios middlewares para responder a requests a ciertas paths con verbos http declarados.

          ejeemplo :   app.post('/', callback)
                      app.get()

- app.route(path).VERB([callback],callback) : para definir uno o varios middlewates para requests con multiples verbos http

          ejemplo: app.route(parth).get(callback).post(callback)


- app.param([name],callback) :   incluir parametros

              app.param('userId', callback)




--------------------


Objeto request


-------------------

propiedades y métodos

- req.query : propiedad contiene los query-string parametros
- req.params : propiedad contiene los parametros de enrutamiento analizados parsed
- req.body : recupera el cuerpo de la petición
   esta incluido en el middleware bodyParser()

- req.path  - req.hostname - req.ip : recuperar ruta de la petición el hostanamet y la ip remota

- req.cookies : usado en conjunción con cookieParser(9 middleware recupera las cookies enviadas por el navegador


TIENE MAS METODOS
--------------------------


OBJETO RESPONSE


-----------------------------


- res.status(code) : establecer en la respuesta el codigo de estado

- res.set(field, [value]) : establecer caberecras

- res.cookie(name,value,[options]) : establecer una cooke.
 las opciones son la configuración de la cooke como maxAge propiedad

 - res.redirect([status], url): redireccionar lal petición a una urel. codigo es opcional , por defecto 302 found

 - res.status([status]).send([body]) : para non-streaming respuestas. establece content-type y content-Length cabeceras

 -- res.status([status]).json([body]) : identico a res.send()
 para enviar un objeto o array

- res.render(view, [locals], callback) :
   mostrar vistas y enviar html respuesta



MIDDLEWARE EXTERNOS

----------------------------

* morgan: This is an HTTP request logger middleware.
• body-parser: This is a body-parsing middleware that is used to parse the
request body, and it supports various request types.
• method-override: This is a middleware that provides HTTP verb support,
such as PUT or DELETE, in places where the client doesn't support it.
• compression: This is a compression middleware that is used to compress the
response data using GZIP/deflate.
• express.static: This is a middleware used to serve static files.
• cookie-parser: This is a cookie-parsing middleware that populates the req.
cookies object.
• Session: This is a session middleware used to support persistent sessions.



EStrucutra proyecto


- horizontal : pequeños proyectos
               separado en carpetas mvc
- vertical : dividido en carpetas y archivos que impletentas su funcionalidad con una estructura mvc



CONFIGURACION DE express


VARIABLE : process.ENV




-------------------------------
vistas
----------------------------------------
res.render()   // enviar HTML EN LA respuesta

ENVIAR EMAIL : app.render()






     MONGO


     -----------------



     SELECT * FROM Posts WHERE Title LIKE '%mongo%';

db.posts.find({ title:/mongo/ });







mongoose


traer unos campos determinados
------------------------------------------------

User.find({}, 'username email', (err, users) => {
…
});



opciones
----------------


User.find({}, 'username email', {
skip: 10,
limit: 10
}, (err, users) => {
...
});
